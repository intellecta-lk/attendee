services:
  attendee-worker-local:
    build: ./
    volumes:
     - .:/attendee
    networks:
      - attendee_network
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/5
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-attendee.settings.internal}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_RECORDING_STORAGE_BUCKET_NAME=${AWS_RECORDING_STORAGE_BUCKET_NAME}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CREDENTIALS_ENCRYPTION_KEY=${CREDENTIALS_ENCRYPTION_KEY}
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping --destination celery@$$HOSTNAME"]
    # command: ["/bin/bash", "-c", "/opt/bin/entrypoint.sh && celery -A attendee worker -l INFO"]
    command: celery -A attendee worker -l INFO

  attendee-scheduler-local:
    build: ./
    volumes:
     - .:/attendee
    networks:
      - attendee_network
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/5
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-attendee.settings.internal}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_RECORDING_STORAGE_BUCKET_NAME=${AWS_RECORDING_STORAGE_BUCKET_NAME}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CREDENTIALS_ENCRYPTION_KEY=${CREDENTIALS_ENCRYPTION_KEY}
    command: ["/bin/bash", "-c", "/opt/bin/entrypoint.sh && python manage.py run_scheduler"]

  attendee-app-local:
    build: ./
    volumes:
     - .:/attendee
    networks:
      - attendee_network
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/5
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-attendee.settings.internal}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_RECORDING_STORAGE_BUCKET_NAME=${AWS_RECORDING_STORAGE_BUCKET_NAME}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CREDENTIALS_ENCRYPTION_KEY=${CREDENTIALS_ENCRYPTION_KEY}
    healthcheck:
      test: ["CMD" , "curl" ,"-f", "http://localhost:8000/"]
    # command: python manage.py runserver 0.0.0.0:8000
    command: gunicorn --bind 0.0.0.0:8000 attendee.wsgi

  postgres:
    image: postgres:15.3-alpine
    environment:
      POSTGRES_DB: attendee_development
      POSTGRES_USER: attendee_development_user
      POSTGRES_PASSWORD: attendee_development_user
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    networks:
      - attendee_network
    restart: unless-stopped


  redis:
    image: redis:7-alpine
    networks:
      - attendee_network
    restart: unless-stopped
    volumes:
      - redis:/data/redis

networks:
  attendee_network:
    driver: bridge

volumes:
  postgres:
  redis:
  
